#!/usr/bin/env bash

# 7zopen
#
# Copyright (c) 2015, Kristofer Berggren
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the author nor the names of its contributors may
#       be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Package details ####################################################
URL="https://github.com/d99kris/7zetools"
PKGNAME="7zetools"
VERSION="1.0"
PROGNAME="7zopen"
AUTHOR="Kristofer Berggren"

# Pre-requisites checking ############################################
which 7z &> /dev/null
if [ "${?}" != "0" ]; then
  echo "Required tool 7z not found."
  exit 1
fi
which realpath &> /dev/null
if [ "${?}" != "0" ]; then
  echo "Required tool realpath not found."
  exit 1
fi
SHASUM=$(which sha1sum shasum | head -1 | grep sha)
if [ "${?}" != "0" ]; then
  echo "Required tool sha1sum or shasum not found."
  exit 1
fi
if [ "${BASH_VERSINFO}" -lt 4 ]; then
  echo "Required bash version (>=4) not found."
  exit 1
fi
TMPDIR="/dev/shm"
if [[ ! -d "${TMPDIR}" ]]; then
  if [[ "$(uname)" == "Darwin" ]]; then
    TMPDIR="/Volumes/7zetools"
  else
    echo "Required directory ${TMPDIR} not found, exiting."
    exit 1
  fi
fi

# Globals ############################################################
USERTMPDIR="${TMPDIR}/7z-`whoami`"
USERTMPDATADIR=""
USERPASSFILE="${USERTMPDIR}/password"
USERCFGFILE="${HOME}/.7zetoolsrc"
OIFS=${IFS}
IFS=$'\n'

# Read configuration settings ########################################
typeset -A PROG
if [[ -r "${USERCFGFILE}" && -f "${USERCFGFILE}" ]]; then
  while read LINE
  do
    if [[ ${LINE} == *"="* ]]; then
      VAR=$(echo "${LINE}" | cut -d '=' -f 1)
      VAL=$(echo "${LINE}" | cut -d '=' -f 2-)
      PROG[${VAR}]=$(eval echo "${VAL}")
    fi
  done < ${USERCFGFILE}
fi

# Application info ###################################################
showusage()
{
  echo "${PROGNAME} decrypts specified 7z archive to volatile memory (RAM)"
  echo "and opens the files using systems default viewer/editor (or as "
  echo "manually specified by user). After the viewer/editor program has been"
  echo "closed, 7zopen updates any files in the 7z archive that were modified."
  echo ""
  echo "Note: This utility only makes sense to use when operating on 7z "
  echo "archives with single file, or multiple files of same filetype (thus"
  echo "the same editor/viewer can be used)."
  echo ""
  echo "${PROGNAME} may be user-configured to utilize a specific program for"
  echo "a certain filetype. The configuration file shall be stored in"
  echo "\$HOME/.7zetoolsrc and can specify a program for each mime-type. For"
  echo "example in order to use nano for all files with mime-type text/plain"
  echo "add a line:"
  echo "   TEXTPLAINPROG=nano"
  echo ""
  echo "You may use ${PROGNAME} to determine mime-type in a 7z archive, as it"
  echo "outputs this information in the console upon opening the archive."
  echo ""
  echo "Usage: ${PROGNAME} OPTION"
  echo "   or: ${PROGNAME} [PROG] PATH"
  echo ""
  echo "Options:"
  echo "   --help        display this help and exit"
  echo "   --version     output version information and exit"
  echo "   [PROG]        optionally specified viewer/editor program"
  echo "   PATH          7z archive file"
  echo ""
  echo "Examples:"
  echo "   ${PROGNAME} nano a.7z    decrypts specified 7z archive"
  echo "                       and opens the file(s) in the archive"
  echo "                       with text editor nano"
  echo ""
  echo "Report bugs at ${URL}"
  echo ""
}

showversion()
{
  echo "${PROGNAME} v${VERSION}"
  echo ""
  echo "Copyright (C) 2015 ${AUTHOR}"
  echo ""
  echo "${PROGNAME} is part of 7zetools and distributed"
  echo "under BSD 3-Clause license."
  echo ""
  echo "Written by ${AUTHOR}"
}

# Usage checking #####################################################
if [ "${1}" == "--help" ] ; then
  showusage
  exit 0
elif [ "${1}" == "--version" ] ; then
  showversion
  exit 0
fi
if [ "${#}" == "1" ] ; then
  DEFPROG=""
  ENCNAME="${1}"
else
  if [ "${#}" == "2" ] ; then
    DEFPROG="${1}"
    ENCNAME="${2}"
  fi
fi
if [ ! -f "${ENCNAME}" ]; then
  showusage
  exit 1
fi
if [ "${DEFPROG}" != "" ]; then
  which ${DEFPROG} &> /dev/null
  if [ "${?}" != "0" ]; then
    showusage
    echo "${DEFPROG} cannot be found"
    exit 1
  fi
fi
ENCPATH="`realpath ${ENCNAME}`"
ENCID="`echo ${ENCPATH} | ${SHASUM} | cut -f1 -d' '`"

# Password checking ##################################################
if [ -f "${USERPASSFILE}" ]; then
  KEY1="`cat ${USERPASSFILE}`"
fi
if [ "${KEY1}" == "" ]; then
  echo "Password is not set, please run 7zpass to set password"
  exit 1
fi

# Determine which temporary storage to use ###########################
ENCSIZE="`BLOCKSIZE=1024 ls -s ${ENCPATH} | sed -e 's/^[[:space:]]*//' | cut -d' ' -f1`"
TMPSPACE="`df -k ${TMPDIR} | awk '/[0-9]%/{print $(NF-2)}'`"
if [ "${ENCSIZE}" -lt "${TMPSPACE}" ]; then
  echo "Using ${TMPDIR} for temporary storage"
  USERTMPDATADIR="${USERTMPDIR}/${ENCID}"
else
  SECTMPDIR="/tmp"
  SECUSERTMPDIR="${SECTMPDIR}/7z-`whoami`"
  SECTMPSPACE="`df -k ${SECTMPDIR} | awk '/[0-9]%/{print $(NF-2)}'`"
  if [ "${ENCSIZE}" -lt "${SECTMPSPACE}" ]; then
    echo "Primary temporary directory ${TMPDIR} does not"
    echo "have enough free space. Proceed to use secondary"
    read -p "temporary directory ${SECTMPDIR} [y/N]? "
    echo ""
    if [ "$REPLY" = "y"  ] ; then
      echo "Using ${SECTMPDIR} for temporary storage"
      USERTMPDATADIR="${SECUSERTMPDIR}/${ENCID}"
    else
      echo "User abort"
      exit 1
    fi
  else
    echo "Free temporary storage insufficient, use 7zdec"
    exit 1
  fi
fi

# Decrypt specified file #############################################
mkdir -p ${USERTMPDATADIR}
cd ${USERTMPDATADIR}
7z x -p${KEY1} ${ENCPATH}
if [ "${?}" != "0" ]; then
  echo "Decryption failed"
  exit 1
fi

# Determine application to open with #################################
FIRSTFILE="`find . -type f | head -1`"
MIME="`file --mime-type -b ${FIRSTFILE}`"
CUSTPROG="`echo $MIME | sed 's/\///g' | awk '{print toupper($0)}'`PROG"
PROGARG=""
echo "Mime-type:  ${MIME}"

if [ "${DEFPROG}" == "" ]; then
  # If not manually specified at cmd line, check if custom program set
  DEFPROG=${PROG[${CUSTPROG}]}

  # If no custom program set, use system default
  if [ "${DEFPROG}" == "" ]; then
    if [[ "$(uname)" == "Darwin" ]]; then
      DEFPROG="open"
      PROGARG="-Wn"
    else
      DEFAPP="`xdg-mime query default ${MIME}`"
      DEFPROG="`echo ${DEFAPP} | cut -f1 -d.`"
    fi
  fi
fi
which ${DEFPROG} > /dev/null
if [ "${?}" != "0" ]; then
  echo "${DEFPROG} cannot be found"
  rm -rf ${USERTMPDATADIR}
  exit 1
else
  echo "Program:    ${DEFPROG}"
fi

# Calculate checksum before open #####################################
ALLFILES=($(find . -type f | cut -c3-1024))
ORGCHKSUM=`cat ${ALLFILES[@]} | ${SHASUM} -b | cut -f1 -d' '`

# Open decrypted files ###############################################
${DEFPROG} ${PROGARG} ${ALLFILES[@]}

# Recompress opened files if modified ################################
echo ""
NEWCHKSUM=`cat ${ALLFILES[@]} | ${SHASUM} -b | cut -f1 -d' '`
if [ "${ORGCHKSUM}" != "${NEWCHKSUM}" ]; then
  echo "Updating ${ENCPATH}, do not stop this program"
  7z u -mhe=on -mx0 -p${KEY1} ${ENCPATH} ${ALLFILES[@]}
else
  echo "Closing file without updating archive"
fi
echo ""

# Delete temporary files #############################################
rm -rf ${USERTMPDATADIR}
IFS=${OIFS}

# Exit ###############################################################
exit 0

